name: deployments

on:
  push:
    # Change to release branch
    branches: [ "main" ]

jobs:

  frontend-ecr:
    name: Push Frontend Docker Image to ECR
    runs-on: ubuntu-latest

    if: ${{ github.repository_owner == 'CS3219-AY2223S1' }} # only run deployment on master repo and not forks
    environment: cs3219-project-ay2223s1-g50 # needed to retrieve the secrets from GH environment

    outputs:
      image: ${{ steps.build-image.outputs.image }}

    defaults:
       run:
         working-directory: frontend 
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
        mask-aws-account-id: 'no' # needed to output the image for deploy-ecs job
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cs3219-project-ay2223s1-g50-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  user-service-ecr:
    name: Push User Service Docker Image to ECR
    runs-on: ubuntu-latest

    if: ${{ github.repository_owner == 'CS3219-AY2223S1' }}
    environment: cs3219-project-ay2223s1-g50

    outputs:
      image: ${{ steps.build-image.outputs.image }}

    defaults:
       run:
         working-directory: user-service
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
        mask-aws-account-id: 'no' # needed to output the image for deploy-ecs job
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cs3219-project-ay2223s1-g50-user
        IMAGE_TAG: ${{ github.sha }}
        DB_USERS_CLOUD_URI: ${{ secrets.DB_USERS_CLOUD_URI }}
        REDIS_USERS_CLOUD_URI: ${{ secrets.REDIS_USERS_CLOUD_URI }}
        JWT_ACCESS_TOKEN_SECRET: ${{ secrets.JWT_ACCESS_TOKEN_SECRET }}
        JWT_REFRESH_TOKEN_SECRET: ${{ secrets.JWT_REFRESH_TOKEN_SECRET }}
      run: | 
        docker build -f Dockerfile.prod --build-arg DB_USERS_CLOUD_URI=$DB_USERS_CLOUD_URI --build-arg REDIS_USERS_CLOUD_URI=$REDIS_USERS_CLOUD_URI --build-arg JWT_ACCESS_TOKEN_SECRET=$JWT_ACCESS_TOKEN_SECRET --build-arg JWT_REFRESH_TOKEN_SECRET=$JWT_REFRESH_TOKEN_SECRET -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  question-service-ecr:
    name: Push Question Service Docker Image to ECR
    runs-on: ubuntu-latest

    if: ${{ github.repository_owner == 'CS3219-AY2223S1' }} # only run deployment on master repo and not forks
    environment: cs3219-project-ay2223s1-g50 # needed to retrieve the secrets from GH environment

    outputs:
      image: ${{ steps.build-image.outputs.image }}

    defaults:
       run:
         working-directory: question-service
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
        mask-aws-account-id: 'no' # needed to output the image for deploy-ecs job
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cs3219-project-ay2223s1-g50-question
        IMAGE_TAG: ${{ github.sha }}
        DB_QUESTIONS_CLOUD_URI: ${{ secrets.DB_QUESTIONS_CLOUD_URI }}
      run: |
        docker build -f Dockerfile.prod --build-arg DB_QUESTIONS_CLOUD_URI=$DB_QUESTIONS_CLOUD_URI -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  matching-service-ecr:
    name: Push Matching Service Docker Image to ECR
    runs-on: ubuntu-latest

    if: ${{ github.repository_owner == 'CS3219-AY2223S1' }} # only run deployment on master repo and not forks
    environment: cs3219-project-ay2223s1-g50 # needed to retrieve the secrets from GH environment

    outputs:
      image: ${{ steps.build-image.outputs.image }}

    defaults:
       run:
         working-directory: matching-service
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
        mask-aws-account-id: 'no' # needed to output the image for deploy-ecs job
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cs3219-project-ay2223s1-g50-matching
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  collaboration-service-ecr:
    name: Push Collaboration Service Docker Image to ECR
    runs-on: ubuntu-latest

    if: ${{ github.repository_owner == 'CS3219-AY2223S1' }} # only run deployment on master repo and not forks
    environment: cs3219-project-ay2223s1-g50 # needed to retrieve the secrets from GH environment

    outputs:
      image: ${{ steps.build-image.outputs.image }}

    defaults:
       run:
         working-directory: collaboration-service
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
        mask-aws-account-id: 'no' # needed to output the image for deploy-ecs job
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cs3219-project-ay2223s1-g50-collaboration
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  chat-service-ecr:
    name: Push Chat Service Docker Image to ECR
    runs-on: ubuntu-latest

    if: ${{ github.repository_owner == 'CS3219-AY2223S1' }} # only run deployment on master repo and not forks
    environment: cs3219-project-ay2223s1-g50 # needed to retrieve the secrets from GH environment

    outputs:
      image: ${{ steps.build-image.outputs.image }}

    defaults:
       run:
         working-directory: chat-service
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
        mask-aws-account-id: 'no' # needed to output the image for deploy-ecs job
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cs3219-project-ay2223s1-g50-chat
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-ecs:
    name: Deploy all ECR images to ECS 
    runs-on: ubuntu-latest

    needs: [ frontend-ecr, user-service-ecr, question-service-ecr, matching-service-ecr, collaboration-service-ecr, chat-service-ecr ]

    if: ${{ github.repository_owner == 'CS3219-AY2223S1' }}
    environment: cs3219-project-ay2223s1-g50

    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    # - name: Download Amazon ECS task definition
    #   run: |
    #     aws ecs describe-task-definition --task-definition cs3219-project-ay2223s1-g50 --query taskDefinition > cs3219-project-ay2223s1-g50.json

    - name: Fill in the new Frontend image ID in the Amazon ECS task definition
      id: render-frontend-container 
      uses: aws-actions/amazon-ecs-render-task-definition@v1.1.1
      with:
        task-definition: cs3219-project-ay2223s1-g50.json
        container-name: frontend 
        image: ${{ needs.frontend-ecr.outputs.image }}
    - name: Fill in the new User Service image ID in the Amazon ECS task definition
      id: render-user-service-container 
      uses: aws-actions/amazon-ecs-render-task-definition@v1.1.1
      with:
        task-definition: ${{ steps.render-frontend-container.outputs.task-definition }}
        container-name: user-service
        image: ${{ needs.user-service-ecr.outputs.image }}
    - name: Fill in the new Question Service image ID in the Amazon ECS task definition
      id: render-question-service-container 
      uses: aws-actions/amazon-ecs-render-task-definition@v1.1.1
      with:
        task-definition: ${{ steps.render-user-service-container.outputs.task-definition }}
        container-name: question-service
        image: ${{ needs.question-service-ecr.outputs.image }}
    - name: Fill in the new Matching Service image ID in the Amazon ECS task definition
      id: render-matching-service-container 
      uses: aws-actions/amazon-ecs-render-task-definition@v1.1.1
      with:
        task-definition: ${{ steps.render-question-service-container.outputs.task-definition }}
        container-name: matching-service
        image: ${{ needs.matching-service-ecr.outputs.image }}
    - name: Fill in the new Collaboration Service image ID in the Amazon ECS task definition
      id: render-collaboration-service-container 
      uses: aws-actions/amazon-ecs-render-task-definition@v1.1.1
      with:
        task-definition: ${{ steps.render-matching-service-container.outputs.task-definition }}
        container-name: collaboration-service
        image: ${{ needs.collaboration-service-ecr.outputs.image }}
    - name: Fill in the new Chat Service image ID in the Amazon ECS task definition
      id: render-chat-service-container 
      uses: aws-actions/amazon-ecs-render-task-definition@v1.1.1
      with:
        task-definition: ${{ steps.render-collaboration-service-container.outputs.task-definition }}
        container-name: chat-service
        image: ${{ needs.chat-service-ecr.outputs.image }}

    - name: Deploy updated Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.10
      with:
        task-definition: ${{ steps.render-chat-service-container.outputs.task-definition }}
        service: cs3219-project-ay2223s1-g50-service-new
        cluster: cs3219-project-ay2223s1-g50-cluster-new
        wait-for-service-stability: true
    - name: Echo Success
      run: echo Successfully deployed microservice images to ECS! 
